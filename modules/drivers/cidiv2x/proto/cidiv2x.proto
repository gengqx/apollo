syntax = "proto2";

package apollo.drivers;

import "modules/common/proto/header.proto";

message LaneFlags {
    optional uint32 lane_id = 1;
    optional bool allow_left_turn = 2;
    optional bool allow_go_straight = 3;
    optional bool allow_right_turn = 4;
}

enum LocalizationType {
    INVALID = 0;  // Invalid solution due to insufficient observations,
                  // integrity warning, etc.
    PROPAGATED = 1;  // Propagated by a Kalman filter without new observations.

    // It is recommended using the following types of solution.
    SINGLE = 2;  // Standard GNSS solution without any corrections.
    PSRDIFF = 3;  // Pseudorange differential solution, including WAAS/SBAS
                  // solution.
    PPP = 4;  // Precise Point Positioning (PPP) solution.
    RTK_FLOAT = 5;  // Real Time Kinematic (RTK) float solution.
    RTK_INTEGER= 6;  // RTK integer solution.
}

message CurrentCarInfo {

    optional uint32 message_cycle_count = 1;
    optional uint32 car_id = 2;
    optional uint32 car_length = 3;
    optional uint32 car_width = 4; 
    optional LocalizationType localization_type = 5;  //real uint32
    optional uint32 num_statellites = 6;
    optional uint32 latitude = 7;
    optional uint32 longitude = 8;
    optional uint32 height_msl = 9;
    optional uint32 heading = 10;
    optional uint32 gps_velocity = 11;
    optional uint32 gps_acceleration = 12;

}

message LaneInfo {
    optional uint32 lane_cycle_count = 1;
    optional uint32 in_map = 2;
    optional uint32 in_lane = 3;
    optional uint32 total_lane = 4;
    optional uint32 current_lane_id = 5;
    repeated LaneFlags lane_flags = 6;  //real uint8,and id increase
}

message SingleLightInfo {
    optional bool receive_flags = 1; //real uint8
    enum Color {
        UNKNOWN = 0;
        RED = 1;
        YELLOW = 2;
        GREEN = 3;
        BLACK = 4;
    };
    optional Color color_status = 2; //real uint8
    optional uint32 light_remain_times = 3;

}

message LaneStopPoint {
    optional uint32 latitude = 1;
    optional uint32 longitude = 2;
}
message TrafficLightInfo{
    optional uint32 traffic_light_cycle_count = 1;
    optional SingleLightInfo current_lane_light = 2;
    optional SingleLightInfo left_turn = 3;
    optional SingleLightInfo straight = 4;
    optional SingleLightInfo right_turn = 5;
    optional LaneStopPoint current_lane_stop_point = 6;

}

enum SignType{
    NO_PARKING = 1;
    PERDESTRIAN_LANE = 2;
    RESET_AREA = 3;
    NEAR_SCHOOL = 4;
    PARKING = 5;
    SPEED_LIMIT = 6;
    NO_ENTRANCE = 7;
    NO_BEAMS = 8;
    WEIHT_LIMIT = 9;
    BUS_STATION = 10;
}

message SignDetails {
    optional SignType sign_type = 1;
    optional uint32 sign_value = 2;
    optional uint32 latitude = 3;
    optional uint32 longitude = 4;
}

message SignInfo {
    optional uint32 sign_cycle_time = 1;
    optional uint32 sign_number =2;
    optional SignDetails sign_details = 3;
}

message CiDiV2X {
    optional apollo.common.Header header = 1;
    optional CurrentCarInfo current_car_info = 2;
    optional LaneInfo lane_info = 3;
    optional TrafficLightInfo traffic_light_info = 4;
}

// cidiv2x rawdata
message RawData {
    optional apollo.common.Header header = 1;
    optional bytes data = 2;
}